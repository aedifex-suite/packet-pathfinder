import {
  BestiaryEntrySchema,
  BestiaryLevelSchema,
  BestiaryFeatSchema,
  BestiaryFeatModifierSchema,
  BestiaryItemSchema,
  BestiaryItemWeaponSchema,
  BestiaryItemArmorSchema,
  BestiaryItemMagicItemSchema,
  BestiaryItemGoodsSchema,
  BestiaryItemWealthSchema,
  BestiaryItemModifierSchema
} from './schemata/bestiary'

class {
  onCreate(input) {
    this.state = {
      errors: {},
    }
    this.subscribeTo(input.link).on('refresh', () => {
      this.forceUpdate()
    })
    this.subscribeTo(input.link).on('destroy', () => {
      this.destroy({removeNode: false, recursive: false})
    })
    this.subscribeTo(input.link).on('errors', errors => {
      this.state.errors = errors
    })
  }
  updateField(which, e) {
    let d = this.input.dot
    let k = which
    if (which === 'hitdice') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'hitpips') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'name') {
      d[k] = e.target.value
    } else if (which === 'size') {
      d[k] = e.target.value
    } else if (which === 'bab') {
      d[k] = Number(e.target.value)
    } else if (which === 'alignment.moral') {
      d[k] = e.target.value
    } else if (which === 'alignment.law') {
      d[k] = e.target.value
    } else if (which === 'saves.fortitude') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.reflex') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.will') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which.startsWith('ability scores')) {
      d[k] = Number(e.target.value)
    }
  }
  addLevel() {
    let d = this.input.dot
    d['levels'].push(BestiaryLevelSchema.create({}))
  }
  removeLevel(index) {
    let d = this.input.dot
    this.input.file.queue()
    d['levels'].splice(index, 1)
    this.input.file.unqueue()
  }
  updateLevelField(index, which, e) {
    let d = this.input.dot
    let k = `levels.${index}.${which}`
    if (which === 'hitpips') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'class') {
      d[k] = e.target.value
    } else if (which === 'level') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'favored') {
      d[k] = e.target.checked
    } else if (which === 'prestige') {
      d[k] = e.target.checked
    } else if (which === 'bab') {
      d[k] = Number(e.target.value)
    } else if (which === 'saves.fortitude') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.reflex') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.will') {
      d[k] = e.target.checked?'good':'bad'
    }
  }
  addFeat() {
    let d = this.input.dot
    d['feats'].push(BestiaryFeatSchema.create({}))
  }
  removeFeat(index) {
    let d = this.input.dot
    this.input.file.queue()
    d['feats'].splice(index, 1)
    this.input.file.unqueue()
  }
  updateFeatField(index, which, e) {
    let d = this.input.dot
    let k = `feats.${index}.${which}`
    if (which === 'name') {
      d[k] = e.target.value
    }
  }
  addFeatModifier(index) {
    let d = this.input.dot
    d[`feats.${index}.modifies`].push(BestiaryFeatModifierSchema.create({}))
  }
  removeFeatModifier(index, modIndex) {
    let d = this.input.dot
    let k = `feats.${index}.modifies`
    this.input.file.queue()
    d[k].splice(modIndex, 1)
    this.input.file.unqueue()
  }
  updateFeatModifierField(index, modIndex, which, e) {
    let d = this.input.dot
    let k = `feats.${index}.modifies.${modIndex}.${which}`
    if (which === 'dot') {
      d[k] = e.target.value
    } else if (which === 'value') {
      d[k] = Number(e.target.value)
    }
  }
  addItem() {
    let d = this.input.dot
    d['items'].push(BestiaryItemSchema.create({}))
  }
  removeItem(index) {
    let d = this.input.dot
    this.input.file.queue()
    d['items'].splice(index, 1)
    this.input.file.unqueue()
  }
  removeItemModifier(index, modIndex) {
    let d = this.input.dot
    let k = `items.${index}.modifies`
    this.input.file.queue()
    d[k].splice(modIndex, 1)
    this.input.file.unqueue()
  }
  updateItemField(index, which, e) {
    let d = this.input.dot
    let k = `items.${index}.${which}`
    if (which === 'name') {
      d[k] = e.target.value
    } else if (which === 'equipped') {
      d[k] = e.target.checked ? true : false
    }
  }
  addItemModifier(index) {
    let d = this.input.dot
    d[`items.${index}.modifies`].push(BestiaryItemModifierSchema.create({}))
  }
  updateItemModifierField(index, modIndex, which, e) {
    let d = this.input.dot
    let k = `items.${index}.modifies.${modIndex}.${which}`
    if (which === 'dot') {
      d[k] = e.target.value
    } else if (which === 'value') {
      d[k] = Number(e.target.value)
    }
  }
  changeItemType(index, e) {
    let d = this.input.dot
    let k = `items.${index}.properties`
    if (e.target.value === 'armor') {
      d[k] = BestiaryItemArmorSchema.conform(Object.assign(d[k], {type: 'armor'}))
    } else if (e.target.value === 'weapon') {
      d[k] = BestiaryItemWeaponSchema.conform(Object.assign(d[k], {type: 'weapon'}))
    } else if (e.target.value === 'magic item') {
      d[k] = BestiaryItemMagicItemSchema.conform(Object.assign(d[k], {type: 'magic item'}))
    } else if (e.target.value === 'goods') {
      d[k] = BestiaryItemGoodsSchema.conform(Object.assign(d[k], {type: 'goods'}))
    } else if (e.target.value === 'wealth') {
      d[k] = BestiaryItemWealthSchema.conform(Object.assign(d[k], {type: 'wealth'}))
    }
  }
  updateItemPropertyField(index, which, e) {
    let d = this.input.dot
    let k = `items.${index}.properties.${which}`
    if (which === 'attack') {
      d[k] = Number(e.target.value)
    } else if (which === 'damage.hitpips') {
      d[k] = Number(e.target.value)
    } else if (which === 'damage.dice') {
      d[k] = Number(e.target.value)
    } else if (which === 'equipped') {
      d[k] = e.target.checked
    } else if (which === 'attacks') {
      d[k] = e.target.checked
    } else if (which === 'enchantment') {
      d[k] = Number(e.target.value)
    } else if (which === 'maxdexbonus') {
      d[k] = Number(e.target.value)
    } else if (which === 'armorcheckpenalty') {
      d[k] = Number(e.target.value)
    } else if (which === 'spellfailure') {
      d[k] = Number(e.target.value)
    } else if (which === 'speed') {
      d[k] = Number(e.target.value)
    }
  }
}

macro|{ renderBody, field }| name='errorable'
  span.errorable class=state.errors[field]?'-error':''
    <${renderBody}/>
    if(state.errors[field])
      span.errorable__error -- ${state.errors[field]}
$ let d = input.dot
$ let statmap = {str: 'Strength', dex: 'Dexterity', con: 'Constitution', int: 'Intelligence', wis: 'Wisdom', cha: 'Charisma'}
$ let actargets = {armor: 'Armor', deflection: 'Deflection', dodge: 'Dodge', enhancement: 'Enhancement', insight: 'Insight', luck: 'Luck', natural: 'Natural', profane: 'Profane', sacred: 'Sacred', shield: 'Shield'}
Section config=input.config class="Editor__Core" default='open'
  @heading
    span.Editor__Core__heading -- Core
  @content
    div.Editor__Core__content
      label.Editor__Entry
        span.Editor__Entry__name -- Name
        errorable field=`name`
          input.Editor__Entry__input value=d['name'] size=8 on-change('updateField', 'name')
      label.Editor__Entry
        span.Editor__Entry__name -- Size
        errorable field=`size`
          select.Editor__Entry__input name='size' id='size' on-change('updateField', 'size')
            for|value| of=['fine', 'diminutive', 'tiny', 'small', 'medium', 'large', 'huge', 'gargantuan', 'colossal']
              option value=value selected=d['size']===value -- ${value}
      label.Editor__Entry
        span.Editor__Entry__name -- Alignment
        errorable field=`alignment.law`
          select.Editor__Entry__input name='alignment.law' id='alignment.law' on-change('updateField', 'alignment.law')
            for|value| of=['lawful', 'neutral', 'chaotic']
              option value=value selected=d['alignment.law']===value -- ${value}
        errorable field=`alignment.moral`
          select.Editor__Entry__input name='alignment.moral' id='alignment.moral' on-change('updateField', 'alignment.moral')
            for|value| of=['good', 'neutral', 'evil']
              option value=value selected=d['alignment.moral']===value -- ${value}
      label.Editor__Entry
        span.Editor__Entry__name -- HD
        input.Editor__Entry__input style='width:3em' type='number' value=d['hitdice'] size=4 on-change('updateField', 'hitdice')
        if(d['hitdice']>0)
          span -- d
          select.Editor__Entry__input name='die' id='die' on-change('updateField', 'hitpips')
            for|value| of=[4,6,8,10,12]
              option value=value selected=d['hitpips']===value -- ${value}
      if(d['hitdice']>0)
        label.Editor__Entry
          span.Editor__Entry__name -- BAB
          select.Editor__Entry__input name='bab' id='bab' on-change('updateField', 'bab')
            for|value| of=[0.5,0.75,1]
              option value=value selected=d['bab']===value -- ${value===0.5?'slow':value===0.75?'medium':'fast'}
        label.Editor__Entry
          div.Editor__Levels__level__saves
            span.Editor__Entry__name -- Good Saves
            label.Editor__Entry__label
              span.Editor__Entry__label -- Fortitude
              input.Editor__Entry__input type='checkbox' checked=d['saves.fortitude']==='good' on-change('updateField', 'saves.fortitude')
            label.Editor__Entry__label
              span.Editor__Entry__label -- Reflex
              input.Editor__Entry__input type='checkbox' checked=d['saves.reflex']==='good' on-change('updateField', 'saves.reflex')
            label.Editor__Entry__label
              span.Editor__Entry__label -- Will
              input.Editor__Entry__input type='checkbox' checked=d['saves.will']==='good' on-change('updateField', 'saves.will')
Section config=input.config class="Editor__Levels" default='closed'
  @heading
    span.Editor__Levels__heading -- Classes (${d['levels'].length})
  @heading_open
    button.Editor__Levels__controls__button on-click('addLevel') -- +
  @content
    div.Editor__Levels__content
      div.Editor__Levels__items
        if(d['levels'])
          for|level, index| of=d['levels']
            Section config=input.conf class=`Editor__Levels__item Editor__Levels__item-${index}` default='closed'
              @heading_closed
                span -- ${level.class||"Unnamed Class"} ${level.level}
              @heading_open
                errorable field=`levels.${index}.class`
                  input.Editor__Entry__input value=level.class placeholder='Unnamed Class' on-change('updateLevelField', index, 'class')
                span.Editor__Levels__item__controls
                  button.Editor__Levels__item__controls__close on-click('removeLevel', index) -- &times;
              @content
                div.Editor__Levels__item__extra title='If favored is checked, bonus hit points are given equal to the class level'
                  span.Editor__Entry__name -- Favored
                  input.Editor__Entry__input type='checkbox' checked=level.favored on-change('updateLevelField', index, 'favored')
                div.Editor__Levels__item__extra
                  span.Editor__Entry__name -- Prestige
                  input.Editor__Entry__input type='checkbox' checked=level.prestige on-change('updateLevelField', index, 'prestige')
                div.Editor__Levels__item__level
                  span.Editor__Entry__name -- Level
                  input.Editor__Entry__input type='number' value=level.level size=4 on-change('updateLevelField', index, 'level')
                  div.Editor__Levels__item__hitpips
                    span.Editor__Entry__name -- HD
                    select.Editor__Entry__input name='die' id='die' on-change('updateLevelField', index, 'hitpips')
                      for|value| of=[4,6,8,10,12]
                        option value=value selected=level.hitpips===value -- ${value}
                div.Editor__Levels__item__bab
                  span.Editor__Entry__name -- BAB
                  select.Editor__Entry__input name='bab' id='bab' on-change('updateLevelField', index, 'bab')
                    for|value| of=[0.5,0.75,1]
                      option value=value selected=level.bab===value -- ${value===0.5?'slow':value===0.75?'medium':'fast'}
                div.Editor__Levels__item__saves
                  span.Editor__Entry__name -- Good Saves
                  label.Editor__Entry__label
                    span.Editor__Entry__label -- Fortitude
                    input.Editor__Entry__input type='checkbox' checked=level.saves.fortitude==='good' on-change('updateLevelField', index, 'saves.fortitude')
                  label.Editor__Entry__label
                    span.Editor__Entry__label -- Reflex
                    input.Editor__Entry__input type='checkbox' checked=level.saves.reflex==='good' on-change('updateLevelField', index, 'saves.reflex')
                  label.Editor__Entry__label
                    span.Editor__Entry__label -- Will
                    input.Editor__Entry__input type='checkbox' checked=level.saves.will==='good' on-change('updateLevelField', index, 'saves.will')
Section config=input.config class="Editor__Statistics" default='open'
  @heading
    span -- Statistics
  @content
    for|key,value| in=statmap
      label.Editor__Entry
        span.Editor__Entry__name -- ${value}
        errorable field=`ability scores.${key}`
          input.Editor__Entry__input type='number' value=d[`ability scores.${key}`] on-change('updateField', `ability scores.${key}`)
Section config=input.config class="Editor__Feats" default='open'
  @heading
    span -- Feats (${d['feats'].length})
  @heading_open
    button.Editor__Feats__controls__button on-click('addFeat') -- +
  @content
    div.Editor__Feats__content
      div.Editor__Feats__items
        for|feat, index| of=d['feats']
          Section config=input.config class=`Editor__Feats__item Editor__Feats__item-${index}` default='closed'
            @heading_closed
              span -- ${feat.name||"Unnamed Feat"}
            @heading_open
              errorable field=`feats.${index}.name`
                input.Editor__Entry__input value=feat.name placeholder='Unnamed Feat' on-change('updateFeatField', index, 'name')
              span.Editor__Feats__item__controls
                button.Editor__Feats__item__controls__close on-click('removeFeat', index) -- &times;
            @content
              Section config=input.config class=`Editor__Feats__item__modifiers Editor__Feats__item__modifiers-${index}` default='open'
                @heading
                  span -- Modifiers (${feat.modifies.length})
                @heading_open
                  button.Editor__Items__item__modifier__add on-click('addFeatModifier', index) -- +
                @content
                  for|modifier, modIndex| of=feat.modifies
                    div.Editor__Feats__item__modifier
                      span.Editor__Feats__item__modifier__controls
                        button.Editor__Feats__item__modifier__controls__close on-click('removeFeatModifier', index, modIndex) -- &times;
                      label.Editor__Feats__item__modifier__dot
                        errorable field=`feats.${index}.modifies.${modIndex}.dot`
                          input.Editor__Entry__input list='feat-target-fields' value=modifier.dot placeholder='target field' on-change('updateFeatModifierField', index, modIndex, 'dot')
                      label.Editor__Feats__item__modifier__value
                        input.Editor__Entry__input type='number' value=modifier.value size=4 on-change('updateFeatModifierField', index, modIndex, 'value')
datalist id='feat-target-fields'
  for|key,value| in=statmap
    option value=`ability scores.${key}` -- ${value}
  for|value| of=['fortitude', 'reflex', 'will']
    option value=`saves.${value}` -- ${value[0].toUpperCase()+value.slice(1)}
  option value='hp' -- HP
  option value='attack' -- Attack
  option value='cmb' -- CMB
  for|key,value| in=actargets
    option value=`ac.${key}` -- ${value} AC
  for|item, index| of=d['items']
    for|itemMod, modIndex| of=item.modifies
      option value=`items.${index}.modifies.${modIndex}` -- ${item.name}: ${itemMod.dot}
Section config=input.config class="Editor__Items" default='open'
  @heading
    span -- Items (${d['items'].length})
  @heading_open
    button.Editor__Items__controls__button on-click('addItem') -- +
  @content
    div.Editor__Items__content
      div.Editor__Items__items
        for|item, index| of=d['items']
          Section config=input.config class=`Editor__Items__item Editor__Items__item-${index}` default='closed'
            @heading_closed
              span -- ${item.name||'Unnamed Item'}
            @heading_open
              errorable field=`items.${index}.name`
                input.Editor__Entry__input placeholder='Unnamed Item' value=item.name on-change('updateItemField', index, 'name')
              span.Editor__Items__item__controls
                button.Editor__Items__item__controls__close on-click('removeItem', index) -- &times;
            @content
              div.Editor__Items__item__type
                span.Editor__Entry__name -- Type
                select.Editor__Entry__input name='type' on-change('changeItemType', index)
                  for|value| of=['armor', 'weapon', 'magic item', 'goods', 'wealth']
                    option value=value selected=item.properties.type===value -- ${value}
              if(item.properties.equipped !== undefined)
                div.Editor__Items__item__equipped
                  span.Editor__Entry__name -- Equipped
                  input.Editor__Entry__input type='checkbox' checked=item.properties.equipped on-change('updateItemPropertyField', index, 'equipped')
              if(item.properties.attacks !== undefined)
                div.Editor__Items__item__equipped
                  span.Editor__Entry__name -- Attacks
                  input.Editor__Entry__input type='checkbox' checked=item.properties.attacks on-change('updateItemPropertyField', index, 'attacks')
              if(item.properties.type === 'weapon')
                div.Editor__Items__item__enchantment
                  span.Editor__Entry__name -- Enchantment
                  errorable field=`items.${index}.properties.enchantment`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.enchantment on-change('updateItemPropertyField', index, 'enchantment')
                div.Editor__Items__item__attack
                  span.Editor__Entry__name -- Attack
                  errorable field=`items.${index}.properties.attack`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.attack on-change('updateItemPropertyField', index, 'attack')
                div.Editor__Items__item__damage
                  span.Editor__Entry__name -- Damage
                  span
                    input.Editor__Entry__input style='width:3em' type='number' value=item.properties.damage.dice size=4 on-change('updateItemPropertyField', index, 'damage.dice')
                    span -- d
                    select.Editor__Entry__input name='pips' on-change('updateItemPropertyField', index, 'hitpips')
                      for|value| of=[4,6,8,10,12]
                        option value=value selected=item.properties.damage.hitpips===value -- ${value}
              else-if(item.properties.type === 'armor')
                div.Editor__Items__item__enchantment
                  span.Editor__Entry__name -- Enchantment
                  errorable field=`items.${index}.properties.enchantment`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.enchantment on-change('updateItemPropertyField', index, 'enchantment')
                div.Editor__Items__item__maxdexbonus
                  span.Editor__Entry__name -- Max Dex Bonus
                  errorable field=`items.${index}.properties.maxdexbonus`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.maxdexbonus on-change('updateItemPropertyField', index, 'maxdexbonus')
                div.Editor__Items__item__armorcheckpenalty
                  span.Editor__Entry__name -- Armor Check Penalty
                  errorable field=`items.${index}.properties.armorcheckpenalty`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.armorcheckpenalty on-change('updateItemPropertyField', index, 'armorcheckpenalty')
                div.Editor__Items__item__spellfailure
                  span.Editor__Entry__name -- Arcane Spell Failure Chance
                  errorable field=`items.${index}.properties.spellfailure`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.spellfailure on-change('updateItemPropertyField', index, 'spellfailure')
                    span -- %
                div.Editor__Items__item__speed
                  span.Editor__Entry__name -- Speed
                  errorable field=`items.${index}.properties.speed`
                    input.Editor__Entry__input style='width: 4em' type='number' value=item.properties.speed on-change('updateItemPropertyField', index, 'speed')
              if(item.properties.equipped !== undefined)
                Section config=input.config class=`Editor__Items__item__modifiers Editor__Items__item__modifiers-${index}` default='open'
                  @heading
                    span -- Modifiers (${item.modifies.length})
                  @heading_open
                    button.Editor__Items__item__modifier__add on-click('addItemModifier', index) -- +
                  @content
                    for|modifier, modIndex| of=item.modifies
                      div.Editor__Items__item__modifier
                        span.Editor__Items__item__modifier__controls
                          button.Editor__Items__item__modifier__controls__close on-click('removeItemModifier', index, modIndex) -- &times;
                        label.Editor__Items__item__modifier__dot
                          errorable field=`items.${index}.modifies.${modIndex}.dot`
                            input.Editor__Entry__input list='item-target-fields' value=modifier.dot placeholder='target field' on-change('updateItemModifierField', index, modIndex, 'dot')
                        label.Editor__Items__item__modifier__value
                          input.Editor__Entry__input type='number' value=modifier.value size=4 on-change('updateItemModifierField', index, modIndex, 'value')
datalist id='item-target-fields'
  for|key,value| in=statmap
    option value=`ability scores.${key}` -- ${value}
  for|value| of=['fortitude', 'reflex', 'will']
    option value=`saves.${value}` -- ${value[0].toUpperCase()+value.slice(1)}
  option value='hp' -- HP
  option value='attack' -- Attack
  option value='cmb' -- CMB
  for|key,value| in=actargets
    option value=`ac.${key}` -- ${value} AC

style {
  .Editor__Entry {
    display: block;
  }
  .Editor__Entry.-errors {
    background: rgba(255,0,0,0.5);
  }
  .Editor__Entry__name {
    display: inline-block;
    min-width: 7em;
  }
  .Editor__Entry__input {
  }
  .Editor__Statistics .Editor__Entry__input {
    width: 3em;
  }
  .errorable {
    position: relative;
  }
  .errorable.-error > input {
    border: 1px solid red;
  }
  .errorable:focus-within .errorable__error {
    display: block;
  }
  .errorable__error {
    display: none;
    left: 0;
    top: 100%;
    position: absolute;
    color: red;
    background: #000;
    padding: .25em;
    margin: .25em;
    opacity: 0.9;
    z-index: 1000;
  }
  /* Levels */
  .Editor__Levels__content {
    padding: .25em;
  }
  .Editor__Levels__controls__button {
    margin-left: 1em;
  }
  .Editor__Levels__items {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
  }
  .Editor__Levels__item {
    position: relative;
    padding: 1em;
    margin: .5em;
    background: var(--listing-bg);
    min-width: 20em;
  }
  .Editor__Levels__item__controls {
    position: absolute;
    top: 0; right: 0;
    background: var(--content-bg);
  }
  .Editor__Levels__item__controls__close {
    width: 1em;
    height: 1em;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    cursor: default;
    font-size: 150%;
    background: transparent;
  }
  .Editor__Levels__item__controls__close:hover {
    opacity: 1;
  }
  /* Feats */
  .Editor__Feats__content {
    padding: .25em;
  }
  .Editor__Feats__controls__button {
    margin-left: 1em;
  }
  .Editor__Feats__items {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
  }
  .Editor__Feats__item {
    position: relative;
    padding: 1em;
    margin: .5em;
    background: var(--listing-bg);
    min-width: 20em;
  }
  .Editor__Feats__item__controls {
    position: absolute;
    top: 0; right: 0;
    background: var(--content-bg);
  }
  .Editor__Feats__item__controls__close {
    width: 1em;
    height: 1em;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    cursor: default;
    font-size: 150%;
    background: transparent;
  }
  .Editor__Feats__item__controls__close:hover {
    opacity: 1;
  }
  .Editor__Feats__item__modifier {
    position: relative;
    padding: 1em;
    margin: .5em;
    background: #1f1f1f;
    display: flex;
  }
  .Editor__Feats__item__modifier__value > input {
    width: 4em;
  }
  .Editor__Feats__item__modifier__controls {
    position: absolute;
    top: 0; right: 0;
    background: var(--content-bg);
  }
  .Editor__Feats__item__modifier__controls__close {
    width: 1em;
    height: 1em;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    cursor: default;
    background: transparent;
  }
  .Editor__Feats__item__modifier__controls__close:hover {
    opacity: 1;
  }
  /* Items */
  .Editor__Items__content {
    padding: .25em;
  }
  .Editor__Items__controls__button {
    margin-left: 1em;
  }
  .Editor__Items__items {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
  }
  .Editor__Items__item {
    position: relative;
    padding: 1em;
    margin: .5em;
    background: var(--listing-bg);
    min-width: 20em;
  }
  .Editor__Items__item__controls {
    position: absolute;
    top: 0; right: 0;
    background: var(--content-bg);
  }
  .Editor__Items__item__controls__close {
    width: 1em;
    height: 1em;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    cursor: default;
    font-size: 150%;
    background: transparent;
  }
  .Editor__Items__item__controls__close:hover {
    opacity: 1;
  }
  .Editor__Items__item__modifier__add {
    margin-left: 1em;
  }
  .Editor__Items__item__modifier {
    position: relative;
    padding: 1em;
    margin: .5em;
    background: #1f1f1f;
    display: flex;
  }
  .Editor__Items__item__modifier__value > input {
    width: 4em;
  }
  .Editor__Items__item__modifier__controls {
    position: absolute;
    top: 0; right: 0;
    background: var(--content-bg);
  }
  .Editor__Items__item__modifier__controls__close {
    width: 1em;
    height: 1em;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    cursor: default;
    background: transparent;
  }
  .Editor__Items__item__modifier__controls__close:hover {
    opacity: 1;
  }
}
